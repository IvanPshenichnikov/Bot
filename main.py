from youtube_search import YoutubeSearch

import requests
from bs4 import BeautifulSoup

import datetime
import random

from googletrans import Translator

from aiogram import Bot, types, utils
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import *

from aiogram.utils.exceptions import NetworkError

import hashlib
import logging

import time

import re
import os

import yt_dlp
from yt_dlp.utils import DownloadError

logging.basicConfig(level=logging.INFO)

bot = Bot(token='TOKEN BOTA', parse_mode='html')
dp = Dispatcher(bot)


class FilenameCollectorPP(yt_dlp.postprocessor.common.PostProcessor):
    def __init__(self):
        super(FilenameCollectorPP, self).__init__(None)
        self.filenames = []

    def run(self, information):
        self.filenames.append(information["filepath"])
        return [], information


# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
class Settings:
    def __init__(self):
        self.url = ''
        self.url_id = ''
        self.user_id = ''

        self.views = {1: [1, ''],
                      2: [1, ''],
                      3: [1, ''],
                      4: [1000, 'K'],
                      5: [1000, 'K'],
                      6: [1000, 'K'],
                      7: [1000000, 'M'],
                      8: [1000000, 'M'],
                      9: [1000000, 'M'],
                      10: [1000000000, 'B'],
                      11: [1000000000, 'B'],
                      12: [1000000000, 'B']}

        self.users = {}


settings = Settings()


def text_translator(text='', src='ru', dest='en'):
    translator = Translator()
    translation = translator.translate(text=text, src=src, dest=dest)

    return translation.text


def load_picture():
    try:
        video = f'https://img.youtube.com/vi/{settings.url_id}/maxresdefault.jpg'
        stream = f'https://img.youtube.com/vi/{settings.url_id}/maxresdefault_live.jpg'

        url = settings.url

        result = re.search(r'watch\?v=([a-zA-Z0-9]*)', url)

        if result:
            t_url = None
            video_id = result.group()[0]

            req = requests.get(url)
            page = req.content.decode('utf-8')
            if stream.format(video_id) in page:
                t_url = stream.format(video_id)
            else:
                t_url = video.format(video_id)

            req = requests.get(t_url)

            with open(f'{settings.url_id}.jpg', 'wb') as file:
                file.write(req.content)
                file.close()

            file_size = os.stat(f'{settings.url_id}.jpg').st_size

            if file_size / 1024 < 2:
                os.remove(f'{settings.url_id}.jpg')
                raise IndexError

    except IndexError:
        video = f'https://img.youtube.com/vi/{settings.url_id}/hqdefault.jpg'
        stream = f'https://img.youtube.com/vi/{settings.url_id}/hqdefault_live.jpg'

        url = settings.url

        result = re.search(r'watch\?v=([a-zA-Z0-9]*)', url)

        if result:
            t_url = None
            video_id = result.group()[0]

            req = requests.get(url)
            page = req.content.decode('utf-8')
            if stream.format(video_id) in page:
                t_url = stream.format(video_id)
            else:
                t_url = video.format(video_id)

            req = requests.get(t_url)

            with open(f'{settings.url_id}.jpg', 'wb') as file:
                file.write(req.content)
                file.close()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    settings.users[message.from_user.id] = ['', '', 'en', '', '']
    markup = types.InlineKeyboardMarkup(row_width=2)

    english = types.InlineKeyboardButton('üá¨üáß English', callback_data='startlangeng')
    russian = types.InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='startlangrus')

    markup.add(english, russian)

    await bot.send_message(message.chat.id, '<b>Choose language (–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫).</b>', reply_markup=markup)


@dp.message_handler(commands=['restart'])
async def restart(message: types.Message):
    settings.users[message.from_user.id] = ['', '', 'en', '', '']
    markup = types.InlineKeyboardMarkup(row_width=2)

    english = types.InlineKeyboardButton('üá¨üáß English', callback_data='startlangeng')
    russian = types.InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='startlangrus')

    markup.add(english, russian)

    await bot.send_message(message.chat.id, '<b>Choose language (–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫).</b>', reply_markup=markup)


@dp.message_handler(commands=['language'])
async def language(message: types.Message):
    try:
        markup = types.InlineKeyboardMarkup(row_width=2)

        english = types.InlineKeyboardButton('üá¨üáß English', callback_data='eng')
        russian = types.InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='rus')

        markup.add(english, russian)

        await bot.send_message(message.chat.id,
                               text_translator(text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", src="ru",
                                               dest=settings.users[message.from_user.id][2]),
                               reply_markup=markup)

    except KeyError:
        await message.reply("<b>The bot has been updated and needs to be restarted (–ë–æ—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è –∏ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
                            ").\n\n"
                            "üëâ /restart üëà</b>")


@dp.message_handler(commands=['help'])
async def info(message: types.Message):
    try:
        await bot.send_message(message.chat.id,
                               '<b>{}</b>\n\nüî∏ {}\n\n<b>{}</b>'.
                               format(text_translator(
                                   text="–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ —Å —é—Ç—É–±–∞ –≤ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç"
                                        "–∞—Ö?", src="ru", dest=settings.users[message.from_user.id][2]),

                                      text_translator(
                                          text="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞–º –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤–Ω—É"
                                               "—Ç—Ä–µ–Ω–Ω–∏–º –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–º.", src="ru",
                                          dest=settings.users[message.from_user.id][2]),

                                      text_translator(
                                          text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è - 50 –º–±., –Ω–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏"
                                               " –æ–Ω –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç 1.5 –ì–±.", src="ru",
                                          dest=settings.users[message.from_user.id][2]), ))
    except KeyError:
        await message.reply("<b>The bot has been updated and needs to be restarted (–ë–æ—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è –∏ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
                            ").\n\n"
                            "üëâ /restart üëà</b>")


@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    try:
        if message.text.lower() == '–ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ' or message.text.lower() == 'video search':
            markup1 = types.InlineKeyboardMarkup(row_width=1)

            choose = types.InlineKeyboardButton(text_translator(text="–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫", src="ru", dest=settings.
                                                                users[message.from_user.id][2]),
                                                switch_inline_query_current_chat='')
            markup1.add(choose)
            await message.reply(text_translator(text="<b>–ü–æ–∏—Å–∫–æ–≤–∏–∫</b>", src="ru", dest=settings.
                                                users[message.from_user.id][2]), reply_markup=markup1)

        elif 'youtu' in message.text and '/' not in message.text[0]:
            if 'https://www.youtube.com/watch?v=' in message.text and message.text != \
                    'https://www.youtube.com/watch?v=':
                if '&' in message.text:
                    settings.url_id = message.text[message.text.find('=') + 1:message.text.find('&')]
                else:
                    settings.url_id = message.text[message.text.find('=') + 1:]
                settings.url = f'https://www.youtube.com/watch?v={settings.url_id}'

            elif 'youtube.com/shorts/' in message.text:

                if 'https://youtube.com/shorts/' in message.text and message.text != 'https://youtube.com/shorts/':
                    settings.url_id = message.text[message.text.find('shorts/') + 7:message.text.find('?feature')]

                elif 'https://www.youtube.com/shorts/' in message.text and message.text != \
                        'https://www.youtube.com/shorts/':
                    settings.url_id = message.text[message.text.find('shorts/') + 7:]
                    settings.url = f'https://www.youtube.com/watch?v={settings.url_id}'

            elif 'https://youtu.be/' in message.text and message.text != 'https://youtu.be/':
                settings.url_id = message.text[message.text.find('/') + 11:]
                settings.url = f'https://www.youtube.com/watch?v={settings.url_id}'

            elif 'https://www.youtube.com/live/' in message.text and message.text != 'https://www.youtube.com/live/':
                settings.url_id = message.text[message.text.find('live/') + 5:]
                settings.url = f'https://www.youtube.com/watch?v={settings.url_id}'

            else:
                raise TypeError

            youtube_dl_opts = {
                'ignoreerrors': True,
                'quiet': True
            }

            settings.users[message.from_user.id][0] = settings.url

            load_picture()

            with yt_dlp.YoutubeDL(youtube_dl_opts) as ydl:
                try:
                    try:
                        video = ydl.extract_info(f"ytsearch:{settings.users[message.from_user.id][0]}",
                                                 download=False)['entries'][0]
                    except IndexError:
                        video = ydl.extract_info(f"ytsearch:https://www.youtube.com/watch?v={settings.url_id}",
                                                 download=False)['entries'][0]

                    time = video.get("duration", '00:00:00')
                    duration = datetime.datetime.utcfromtimestamp(time).strftime('%H:%M:%S')

                    if int(int(time) / 60 / 60 / 24) > 0:
                        duration_days = str(int(int(video.get("duration", None)) / 60 / 60 / 24)) + ':'
                    else:
                        duration_days = ''

                    views = video.get("view_count", text_translator(text="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å–∫—Ä—ã—Ç—ã.", src="ru",
                                                                    dest=settings.users[message.from_user.id][2]))
                    title = video.get("title", '')

                    settings.users[message.from_user.id][1] = title

                    for i in title:
                        if i in '\/:*?"<>|':
                            settings.users[message.from_user.id][1] = title.replace(i, '')

                    settings.user_id = message.from_user.id

                    like = video.get("like_count", text_translator(text="–õ–∞–π–∫–∏ —Å–∫—Ä—ã—Ç—ã.", src="ru",
                                                                   dest=settings.users[message.from_user.id][2]))
                    autor = video.get("channel", text_translator(text="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å–∫—Ä—ã—Ç–æ.", src="ru",
                                                                 dest=settings.users[message.from_user.id][2]))
                    up_date = video.get("upload_date", text_translator(text="–î–∞—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–∫—Ä—ã—Ç–∞.", src="ru",
                                                                       dest=settings.users[message.from_user.id][2]))
                    upload_date = []

                    for i in up_date:
                        upload_date.append(i)

                    upload_date.insert(-2, '.')
                    upload_date.insert(-5, '.')
                    upload_date = ''.join(upload_date)

                    try:
                        if len(str(like)) > 3:
                            like = str(round(int(like) / settings.views[len(str(like))][0], 1)) + \
                                   settings.views[len(str(like))][1]
                    except ValueError:
                        like = str(like)

                    try:
                        if len(str(views)) > 3:
                            views = str(round(int(views) / settings.views[len(str(views))][0], 1)) + \
                                    settings.views[len(str(views))][1]
                    except ValueError:
                        like = str(like)

                    markup = types.InlineKeyboardMarkup(row_width=3)

                    choose = types.InlineKeyboardButton(text_translator(text="–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–≥–æ –≤–∏–¥–µ–æ", src="ru",
                                                                        dest=settings.users[message.from_user.id][
                                                                            2]),
                                                        switch_inline_query_current_chat=settings.users
                                                        [message.from_user.id][1])

                    audio = types.InlineKeyboardButton('üîä ' + text_translator(
                        text="–ê—É–¥–∏–æ", src="ru", dest=settings.users[message.from_user.id][2]),
                                                       callback_data='audio')

                    cancel = types.InlineKeyboardButton('‚ùå ' + text_translator(
                        text="–û—Ç–º–µ–Ω–∞", src="ru", dest=settings.users[message.from_user.id][2]),
                                                        callback_data='cancel')

                    if not 'short' in message.text:

                        video240 = types.InlineKeyboardButton('üé• 240p', callback_data='video240')
                        video360 = types.InlineKeyboardButton('üé• 360p', callback_data='video360')
                        video480 = types.InlineKeyboardButton('üé• 480p', callback_data='video480')
                        video720 = types.InlineKeyboardButton('üé• 720p', callback_data='video720')
                        video1080 = types.InlineKeyboardButton('üé• 1080p', callback_data='video1080')

                        markup.add(video240, video360, video480, video720, video1080)
                        markup.add(audio)
                        markup.add(cancel, choose)

                    else:

                        video240 = types.InlineKeyboardButton('üé• 240p', callback_data='shortvideo240')
                        video360 = types.InlineKeyboardButton('üé• 360p', callback_data='shortvideo360')
                        video480 = types.InlineKeyboardButton('üé• 480p', callback_data='shortvideo480')
                        video720 = types.InlineKeyboardButton('üé• 720p', callback_data='shortvideo720')
                        video1080 = types.InlineKeyboardButton('üé• 1080p', callback_data='shortvideo1080')

                        markup.add(video240, video360, video480, video720, video1080)
                        markup.add(audio)
                        markup.add(cancel, choose)

                    await bot.send_photo(chat_id=message.chat.id,
                                         photo=open(f'{settings.url_id}.jpg', 'rb'),
                                         caption="<b>{}\n\n"
                                                 "üë§ {}\n"
                                                 "üëÅ {}\n"
                                                 "üëç {}\n"
                                                 "üì• {}\n"
                                                 "üïí {}{}\n\n"
                                                 '{}'
                                                 '</b>'.format(settings.users[message.from_user.id][1], autor, views,
                                                               like,
                                                               upload_date, duration_days, duration,
                                                               text_translator(text="–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å–∫–∞—á–∞—Ç—å?",
                                                                               src="ru",
                                                                               dest=settings.users[message.from_user.id]
                                                                               [2])), reply_markup=markup)
                except AttributeError:
                    await message.reply(text_translator(
                        text="<b>üö´ –î–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.</b>", src="ru",
                        dest=settings.users[message.from_user.id][2]))

                except IndexError:
                    await message.reply(text_translator(
                        text="<b>üö´ –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ "
                             "–≤ –Ω–µ–π –æ—à–∏–±–æ–∫.</b>", src="ru",
                        dest=settings.users[message.from_user.id][2]))

                except TypeError:
                    await bot.send_photo(chat_id=message.chat.id,
                                         photo=open(f'{settings.url_id}.jpg', 'rb'),
                                         caption=text_translator(
                                             text="<b>üî¥ –≠—Ç–æ –ø—Ä—è–º–æ–π —ç—Ñ–∏—Ä. –°–∫–∞—á–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è.</b>", src="ru",
                                             dest=settings.users[message.from_user.id][2]))

            os.remove(f'{settings.url_id}.jpg')

        else:
            raise TypeError

    except KeyError:
        await message.reply("<b>The bot has been updated and needs to be restarted (–ë–æ—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è –∏ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"
                            ").\n\n"
                            "üëâ /restart üëà</b>")

    except TypeError:
        await message.reply(text_translator(text="<b>‚ùó–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help.</b>", src="ru",
                                            dest=settings.users[message.from_user.id][2]))


@dp.callback_query_handler(lambda call: True)
async def callback(call):
    if call.message:
        try:

            if 'eng' in call.data:
                settings.users[call.message.chat.id][2] = 'en'
                await bot.delete_message(call.message.chat.id, message_id=call.message.message_id)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                choose_video = types.KeyboardButton(
                    text_translator(text="–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ", src="ru", dest=settings.users[call.message.chat.id][2]))

                markup.add(choose_video)

                await bot.send_message(call.message.chat.id, 'Bot translated into English.', reply_markup=markup)

            if 'rus' in call.data:
                settings.users[call.message.chat.id][2] = 'ru'
                await bot.delete_message(call.message.chat.id, message_id=call.message.message_id)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                choose_video = types.KeyboardButton(
                    text_translator(text="–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ", src="ru", dest=settings.users[call.message.chat.id][2]))

                markup.add(choose_video)

                await bot.send_message(call.message.chat.id, '–ë–æ—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.', reply_markup=markup)

            if 'startlang' in call.data:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                choose_video = types.KeyboardButton(
                    text_translator(text="–ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ", src="ru", dest=settings.users[call.message.chat.id][2]))

                markup2 = types.InlineKeyboardMarkup(row_width=1)

                choose = types.InlineKeyboardButton(text_translator(text="–ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫", src="ru", dest=settings.
                                                                    users[call.message.chat.id][2]),
                                                    switch_inline_query_current_chat='')
                markup2.add(choose)
                markup.add(choose_video)
                await bot.send_photo(call.message.chat.id,
                                     open(f'hello_stickers/{random.choice([1, 2, 3, 4, 5, 6, 7, 8])}.jpg', 'rb'),
                                     reply_markup=markup)

                await bot.send_message(
                    call.message.chat.id,
                    '<b>{}</b>\n\n{} \n{}\n\n<b>{}</b>'.format(
                        text_translator(text=f"–ü—Ä–∏–≤–µ—Çc—Ç–≤—É—é! –Ø - YouTubeBot.",
                                        src="ru", dest=settings.users[call.message.chat.id][2]),
                        text_translator(
                            text=f"–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ª—é–±–æ–π –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫ —Å YouTube –≤ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö"
                                 f".", src="ru", dest=settings.users[call.message.chat.id][2]),
                        text_translator(
                            text=f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è - 50 –º–±., –Ω–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç"
                                 f" 1.5 –ì–±.",
                            src="ru", dest=settings.users[call.message.chat.id][2]),
                        text_translator(text=f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–º –≤–∏–¥–µ–æ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫.",
                                        src="ru", dest=settings.users[call.message.chat.id][2])), reply_markup=markup2)



            if call.data == 'video240':
                settings.users[call.message.chat.id][4] = '240'
                settings.users[call.message.chat.id][3] = '240'

            if call.data == 'video360':
                settings.users[call.message.chat.id][4] = '360'
                settings.users[call.message.chat.id][3] = '360'

            if call.data == 'video480':
                settings.users[call.message.chat.id][4] = '480'
                settings.users[call.message.chat.id][3] = '480'

            if call.data == 'video720':
                settings.users[call.message.chat.id][4] = '720'
                settings.users[call.message.chat.id][3] = '720'

            if call.data == 'shortvideo720':
                settings.users[call.message.chat.id][4] = '720'
                settings.users[call.message.chat.id][3] = '1080'

            if call.data == 'shortvideo240':
                settings.users[call.message.chat.id][4] = '240'
                settings.users[call.message.chat.id][3] = '360'

            if call.data == 'shortvideo360':
                settings.users[call.message.chat.id][4] = '360'
                settings.users[call.message.chat.id][3] = '480'

            if call.data == 'shortvideo480':
                settings.users[call.message.chat.id][4] = '480'
                settings.users[call.message.chat.id][3] = '720'

            if call.data == 'video1080':
                settings.users[call.message.chat.id][4] = '1080'
                settings.users[call.message.chat.id][3] = '1080'

            if call.data == 'audio':
                msg = await bot.send_message(chat_id=call.message.chat.id,
                                             text=text_translator(text=f'<b>–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è...\n\n'
                                                                       '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</b>',
                                                                  src="ru",
                                                                  dest=settings.users[call.message.chat.id][2]))
                YDL_OPTIONS = {
                    'max_filesize': 2000000000,
                    'format': 'bestaudio[filesize<50M]/bestaudio',
                    'outtmpl': settings.users[call.message.chat.id][1] + '.mp3',
                    'output': settings.users[call.message.chat.id][1] + '.mp3',
                    'quiet': True
                }

                with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
                    try:
                        filename_collector = FilenameCollectorPP()
                        ydl.add_post_processor(filename_collector)
                        try:
                            video = ydl.extract_info(f"ytsearch:{settings.users[call.message.chat.id][0]}",
                                                     download=True)['entries'][0]
                        except IndexError:
                            video = ydl.extract_info(f"ytsearch:https://www.youtube.com/watch?v={settings.url_id}",
                                                     download=True)['entries'][0]

                        markup1 = types.InlineKeyboardMarkup(row_width=1)

                        choose = types.InlineKeyboardButton(text_translator(
                            text='–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ',
                            src="ru",
                            dest=settings.users[call.message.chat.id][2]),
                            switch_inline_query_current_chat='')
                        markup1.add(choose)
                        if len(settings.users[call.message.chat.id][1] + '.mp3') != 4:
                            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg.message_id,
                                                        text=text_translator(text=f'<b>–ê—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</b>',
                                                                             src="ru",
                                                                             dest=settings.users[call.message.chat.id][
                                                                                 2]))
                            file_size = os.stat(settings.users[call.message.chat.id][1] + '.mp3').st_size
                            await bot.send_audio(chat_id=call.message.chat.id,
                                                 audio=open(settings.users[call.message.chat.id][1] + '.mp3', 'rb'),
                                                 caption=f"üíæ {round(file_size / 1024 / 1024, 1)}MB, @yt_loadbot",
                                                 reply_markup=markup1)
                            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg.message_id,
                                                        text=text_translator(
                                                            text=f'<b>‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è.</b>',
                                                            src="ru",
                                                            dest=settings.users[call.message.chat.id][2]))
                            os.remove(settings.users[call.message.chat.id][1] + '.mp3')
                        else:
                            raise FileNotFoundError

                    except DownloadError:
                        raise FileNotFoundError

                    except FileNotFoundError:
                        await bot.edit_message_text(
                            chat_id=call.message.chat.id, message_id=msg.message_id,
                            text=text_translator(
                                text='<b>üö´ –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n\n'
                                     '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–∞—Ç—å –±–æ—Ç—É —Å—Å—ã–ª–∫—É —Å —ç—Ç–∏–º –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–º.</b>',
                                src="ru",
                                dest=settings.users[call.message.chat.id][2]))
                        os.remove(settings.users[call.message.chat.id][1] + '.mp3')

                    except NetworkError:
                        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg.message_id,
                                                    text=text_translator(
                                                        text='<b>üö´ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å :(</b>',
                                                        src="ru",
                                                        dest=settings.users[call.message.chat.id][2]))

                        await bot.send_message(call.message.chat.id, text_translator(
                            text='<b>–ê—É–¥–∏–æ—Ñ–∞–π–ª –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤ 50 –º–±'
                                 '.</b>',
                            src="ru",
                            dest=settings.users[call.message.chat.id][2]))

                        if filename_collector.filenames:
                            os.remove(settings.users[call.message.chat.id][1] + '.mp3')

            if 'video' in call.data:
                YDL_OPTIONS = {}
                msg = await bot.send_message(chat_id=call.message.chat.id,
                                             text=text_translator(text=f'<b>–í–∏–¥–µ–æ—Ñ–∞–π–ª —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è...\n\n'
                                                                       '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</b>',
                                                                  src="ru",
                                                                  dest=settings.users[call.message.chat.id][2]))

                if 'shortvideo1080' in call.data:
                    YDL_OPTIONS = {
                        'max_filesize': 2000000000,
                        'format': f"(bestvideo[ext=mp4]+bestaudio[ext=m4a])[filesize<50M]/"
                                  f"bestvideo+bestaudio",
                        'outtmpl': settings.users[call.message.chat.id][1] + '.mp4',
                        'output': settings.users[call.message.chat.id][1] + '.mp4',
                        'quiet': True
                    }

                    settings.users[call.message.chat.id][4] = '1080'

                else:
                    YDL_OPTIONS = {
                        'max_filesize': 2000000000,
                        'format': f"(bestvideo[height<={settings.users[call.message.chat.id][3]}][ext=mp4]+"
                                  f"bestaudio[ext=m4a])[filesize<50M]/bestvideo+bestaudio",
                        'outtmpl': settings.users[call.message.chat.id][1] + '.mp4',
                        'output': settings.users[call.message.chat.id][1] + '.mp4',
                        'quiet': True
                    }

                with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
                    try:
                        filename_collector = FilenameCollectorPP()
                        ydl.add_post_processor(filename_collector)
                        try:
                            video = ydl.extract_info(f"ytsearch:{settings.users[call.message.chat.id][0]}",
                                                     download=True)['entries'][0]
                        except IndexError:
                            video = ydl.extract_info(f"ytsearch:https://www.youtube.com/watch?v={settings.url_id}",
                                                     download=True)['entries'][0]

                        markup1 = types.InlineKeyboardMarkup(row_width=1)

                        choose = types.InlineKeyboardButton(
                            text_translator(text='–ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ', src="ru",
                                            dest=settings.users[call.message.chat.id][
                                                2]),
                            switch_inline_query_current_chat='')
                        markup1.add(choose)

                        if len(settings.users[call.message.chat.id][1] + '.mp4') != 4:
                            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg.message_id,
                                                        text=text_translator(text='<b>–í–∏–¥–µ–æ—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</b>',
                                                                             src="ru",
                                                                             dest=settings.users[call.message.chat.id][
                                                                                 2]))

                            file_size = os.stat(settings.users[call.message.chat.id][1] + '.mp4').st_size
                            await bot.send_video(chat_id=call.message.chat.id,
                                                 video=open(settings.users[call.message.chat.id][1] + '.mp4', 'rb'),
                                                 caption=f"{settings.users[call.message.chat.id][1]} \n\n"
                                                         f"üíæ {round(file_size / 1024 / 1024, 1)}MB,"
                                                         f" üé¨{settings.users[call.message.chat.id][4]}p, @yt_loadbot",
                                                 reply_markup=markup1)

                            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg.message_id,
                                                        text=text_translator(
                                                            text=f'<b>‚úÖ –í–∏–¥–µ–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è.</b>',
                                                            src="ru",
                                                            dest=settings.users[call.message.chat.id][2]))
                            os.remove(settings.users[call.message.chat.id][1] + '.mp4')

                        else:
                            raise FileNotFoundError

                    except DownloadError:
                        raise FileNotFoundError

                    except FileNotFoundError:
                        await bot.edit_message_text(
                            chat_id=call.message.chat.id, message_id=msg.message_id,
                            text=text_translator(
                                text='<b>üö´ –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n\n'
                                     '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–∞—Ç—å –±–æ—Ç—É —Å—Å—ã–ª–∫—É —Å —ç—Ç–∏–º –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–º.</b>',
                                src="ru",
                                dest=settings.users[call.message.chat.id][2]))
                        try:
                            os.remove('.mp4.mp4')

                        except:
                            os.remove('.mp4.webm')

                    except IndexError:
                        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg.message_id,
                                                    text=text_translator(
                                                        text='<b>üö´ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å :(</b>',
                                                        src="ru",
                                                        dest=settings.users[call.message.chat.id][2]))

                        await bot.send_message(call.message.chat.id, '<b>–í–∏–¥–µ–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!</b>')

                    except NetworkError:
                        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg.message_id,
                                                    text=text_translator(
                                                        text='<b>üö´ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å :(</b>',
                                                        src="ru",
                                                        dest=settings.users[call.message.chat.id][2]))

                        await bot.send_message(call.message.chat.id, text_translator(
                            text='<b>–í–∏–¥–µ–æ—Ñ–∞–π–ª –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤ 50 –º–±'
                                 '.</b>',
                            src="ru",
                            dest=settings.users[call.message.chat.id][2]))

                        if filename_collector.filenames:
                            os.remove(settings.users[call.message.chat.id][1] + '.mp4')

            if call.data == 'cancel':
                await bot.delete_message(call.message.chat.id, message_id=call.message.message_id)

        except KeyError:
            await bot.send_message(call.message.chat.id, text="<b>The bot has been updated and needs to be restarted "
                                                              "(–ë–æ—Ç –æ–±–Ω–æ–≤–∏–ª—Å—è –∏ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫).\n\n üëâ /restart üëà"
                                                              "</b>")


def searcher(telegram):
    return YoutubeSearch(telegram, max_results=100).to_dict()


@dp.inline_handler()
async def inline_handler(query: types.InlineQuery):
    text = query.query or 'music'

    links = searcher(text)

    articles = [types.InlineQueryResultArticle(
        id=hashlib.md5(f'{link["id"]}'.encode()).hexdigest(),
        title=f'{link["title"]}',
        description=f"üë§ {link['channel']} ‚Ä¢ {link['publish_time']} \n üëÅ"
                    f"{str(link['views'])[:str(link['views']).find('–ø')]}‚Ä¢ üïí {link['duration']}",
        thumb_url=f'{link["thumbnails"][0]}',
        input_message_content=types.InputTextMessageContent(
            message_text=f'https://www.youtube.com/watch?v={link["id"]}'
        )

    ) for link in links]

    await query.answer(articles, cache_time=60, is_personal=True)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
